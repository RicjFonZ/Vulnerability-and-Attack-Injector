package controllers;

import datamodel.TableLog;
import javafx.collections.FXCollections;
import javafx.collections.ListChangeListener;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.control.CheckBox;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import utilities.EnumTypes;
import utilities.HandleFiles;

import java.io.FileNotFoundException;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.UUID;

public class PayloadController implements Initializable {

    @FXML private TableView<TableLog> requestLogTable;
    @FXML private TableView<TableLog> responseLogTable;

    @FXML private TableColumn<TableLog, String> requestlogTimeColumn;
    @FXML private TableColumn<TableLog, String> responselogTimeColumn;
    @FXML private TableColumn<TableLog, String> requestlogDescriptionColumn;
    @FXML private TableColumn<TableLog, String> responselogDescriptionColumn;

    @FXML private CheckBox unknownBox;
    @FXML private CheckBox xmlCheckBox;

    @FXML private Button exportRequestLogs;
    @FXML private Button clearRequestLogs;

    @FXML private Button exportResponseLogs;
    @FXML private Button clearResponseLogs;

    private ObservableList<TableLog> requestlogData = FXCollections.observableArrayList();
    private ObservableList<TableLog> responselogData = FXCollections.observableArrayList();

    private final HandleFiles handleFiles = new HandleFiles();

    private Boolean isDisableResponse = true;
    private Boolean isDisableRequest = true;

    private Boolean isXml = true;

    @Override
    public void initialize(final URL location, final ResourceBundle resources) {

        //Control behavior of CheckBoxes for exporting table logs files.
        controlExportCheckBox();

        //Control behavior of export and clear buttons related to table logs
        exportRequestLogs();
        exportResponseLogs();

        //Clear all logs from Request and Response logs table
        clearRequestLogs();
        clearResponseLogs();

        requestlogTimeColumn.setCellValueFactory(cellData -> cellData.getValue().logTimeProperty());
        requestlogDescriptionColumn.setCellValueFactory(cellData -> cellData.getValue().logDescriptionProperty());

        responselogTimeColumn.setCellValueFactory(cellData -> cellData.getValue().logTimeProperty());
        responselogDescriptionColumn.setCellValueFactory(cellData -> cellData.getValue().logDescriptionProperty());

        requestLogTable.setItems(requestlogData);
        responseLogTable.setItems(responselogData);

        //Thread to simulate creation of logs
        final Thread t = new Thread(() -> {
            while(true) {
                try {
                    Thread.sleep(5008);

                    final String timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss", Locale.forLanguageTag("PT")).format(new Date());

                    final UUID uuid = UUID.randomUUID();
                    final String randomUUIDString = uuid.toString();

                    requestlogData.add(new TableLog(timeStamp, randomUUIDString));
                    responselogData.add(new TableLog(timeStamp, randomUUIDString));

                } catch (InterruptedException ie) {
                    System.out.print(ie.getMessage());
                }
            }
        });
        t.start();

        //Listener for changes on logs Data
        listenerLogsData();
    }

    private void clearRequestLogs(){
        clearRequestLogs.setOnAction(event -> requestlogData.clear());
    }

    private void clearResponseLogs(){
        clearResponseLogs.setOnAction(event -> responselogData.clear());
    }

    private void exportRequestLogs() {
        exportRequestLogs.setOnAction(event -> {
            try {
                handleFiles.saveLogsFile(requestlogData, isXml, EnumTypes.vaitMenusEnum.HttpRequest);
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        });
    }

    private void exportResponseLogs() {
        exportResponseLogs.setOnAction(event -> {
            try {
                handleFiles.saveLogsFile(responselogData, isXml, EnumTypes.vaitMenusEnum.HttpResponse);
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        });
    }

    private void listenerLogsData() {

        responselogData.addListener((ListChangeListener<TableLog>) c -> {
            isDisableResponse = responselogData.isEmpty();
            elementsVisibility();
        });

        requestlogData.addListener((ListChangeListener<TableLog>) c -> {
            isDisableRequest = requestlogData.isEmpty();
            elementsVisibility();
        });
    }

    private void elementsVisibility() {
        unknownBox.setDisable(isDisableResponse && isDisableRequest);
        xmlCheckBox.setDisable(isDisableResponse && isDisableRequest);

        exportRequestLogs.setDisable(isDisableRequest);
        clearRequestLogs.setDisable(isDisableRequest);

        exportResponseLogs.setDisable(isDisableResponse);
        clearResponseLogs.setDisable(isDisableResponse);
    }

    private void controlExportCheckBox() {

        unknownBox.selectedProperty().addListener((observable, oldValue, newValue) -> {
            unknownBox.setSelected(newValue);
            xmlCheckBox.setSelected(oldValue);
            isXml = newValue;
            exportRequestLogs.setDisable(oldValue);
            exportResponseLogs.setDisable(oldValue);
        });

        xmlCheckBox.selectedProperty().addListener((observable, oldValue, newValue) -> {
            xmlCheckBox.setSelected(newValue);
            unknownBox.setSelected(oldValue);
            isXml = oldValue;
        });
    }
}
