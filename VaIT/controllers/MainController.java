package controllers;

import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.MenuItem;
import javafx.scene.control.Tab;
import javafx.scene.control.TabPane;
import javafx.stage.Stage;

import java.io.IOException;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;
import java.util.ResourceBundle;
import java.util.logging.Logger;

public class MainController implements Initializable {

    @FXML private MenuItem toolEncodeDecode;
    @FXML private MenuItem toolRegex;
    @FXML private MenuItem toolHackers;
    @FXML private MenuItem toolJavaDBConsole;

    @FXML private TabPane vaitTabs;
    @FXML private Tab DatabaseTab;

    // Create a Map from all tabs.
    private Map<String,String> mapTabs = new HashMap<>();

    private Parent databaseContent;
    private Parent inspectionContent;
    private Parent attackContent;
    private Parent targetContent;
    private Parent vulnerabilityContent;
    private Parent listenerContent;
    private Parent proxyContent;
    private Parent payloadContent;
    private Parent manualAttackContent;
    private Parent browserContent;
    private Parent idsContent;

    private FXMLLoader databaseLoader;
    private FXMLLoader inspectionLoader;
    private FXMLLoader attackLoader;
    private FXMLLoader targetLoader;
    private FXMLLoader vulnerabilityLoader;
    private FXMLLoader listenerLoader;
    private FXMLLoader proxyLoader;
    private FXMLLoader payloadLoader;
    private FXMLLoader manualAttackLoader;
    private FXMLLoader browserLoader;
    private FXMLLoader idsLoader;

    private Logger log = Logger.getLogger(MainController.class.getName());

    @Override
    public void initialize(final URL location, final ResourceBundle resources) {

        //Filling HashMap with name and location of all tabs
        mapTabs.put("DatabaseTab", "/views/DatabaseView.fxml");
        mapTabs.put("InspectionTab", "/views/InspectionView.fxml");
        mapTabs.put("AttackTab", "/views/AttackView.fxml");
        mapTabs.put("TargetPHPTab", "/views/TargetPHPFileView.fxml");
        mapTabs.put("VulnerabilityInjectionTab", "/views/VulnerabilityInjectionView.fxml");
        mapTabs.put("ListenerTab", "/views/MySQLListenerView.fxml");
        mapTabs.put("ProxyTab", "/views/HTTPProxyView.fxml");
        mapTabs.put("PayloadTab", "/views/PayloadView.fxml");
        mapTabs.put("ManualAttackTab", "/views/ManualAttackView.fxml");
        mapTabs.put("BrowserTab", "/views/MiniBrowserView.fxml");
        mapTabs.put("IDSTab", "/views/IDSView.fxml");

        //Open Tool Encode Decode
        toolEncodeDecode.setOnAction(encodeDecodeEvent -> {
                    try {
                        final FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("/tools/views/EncoderToolView.fxml"));
                        final Parent encodeDecodeTool = fxmlLoader.load();
                        final Stage stage = new Stage();
                        stage.setTitle("Encode / Decode Tool");
                        stage.setResizable(false);
                        stage.setScene(new Scene(encodeDecodeTool));
                        stage.show();
                    } catch (Exception e) {
                        log.fine(e.getMessage());
                    }
                });

        //Open Tool Regex
        toolRegex.setOnAction(regexEvent -> {
                try {
                    final FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("/tools/views/RegexToolView.fxml"));
                    final Parent regexTool = fxmlLoader.load();
                    final Stage stage = new Stage();
                    stage.setTitle("Regex Tool");
                    stage.setResizable(false);
                    stage.setScene(new Scene(regexTool));
                    stage.show();
                } catch (Exception e) {
                    log.fine(e.getMessage());
                }
            });

        //Open Tool ha.ckers.org
        toolHackers.setOnAction(hackersEvent -> {
            try {
                final FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("/tools/views/HackersToolView.fxml"));
                final Parent hackersTool = fxmlLoader.load();
                final Stage stage = new Stage();
                stage.setTitle("ha.ckers.org Tool");
                stage.setResizable(false);
                stage.setScene(new Scene(hackersTool));
                stage.show();
            } catch (Exception e) {
                log.fine(e.getMessage());
            }
        });

        //Open Tool Java DB SQL Console
        toolJavaDBConsole.setOnAction(javaDBConsoleEvent -> {
            try {
                final FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("/tools/views/JavaDBConsoleToolView.fxml"));
                final Parent javaDBConsoleTool = fxmlLoader.load();
                final Stage stage = new Stage();
                stage.setTitle("Java DB SQL Console");
                stage.setResizable(false);
                stage.setScene(new Scene(javaDBConsoleTool));
                stage.show();
            } catch (Exception e) {
                log.fine(e.getMessage());
            }
        });

        //Load MainTab - Database
        loadMainTab();

        vaitTabs.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -> {

            final String viewLocation = mapTabs.get(newValue.getId());

            switch (newValue.getId()){
                case "DatabaseTab" :

                    var setTabContentResult = setTabContent(newValue,viewLocation, databaseLoader, databaseContent);

                    if (databaseLoader == null){
                        databaseLoader = setTabContentResult.loader;
                        databaseContent = setTabContentResult.content;
                    }
                    break;
                    
                case "InspectionTab" :

                    setTabContentResult = setTabContent(newValue,viewLocation, inspectionLoader, inspectionContent);

                    if (inspectionLoader == null) {
                        inspectionLoader = setTabContentResult.loader;
                        inspectionContent = setTabContentResult.content;
                    }

                    break;
                case "AttackTab":

                    setTabContentResult = setTabContent(newValue,viewLocation, attackLoader, attackContent);

                    if (attackLoader == null){
                        attackLoader = setTabContentResult.loader;
                        attackContent = setTabContentResult.content;
                    }

                    break;
                case "TargetPHPTab":

                    setTabContentResult = setTabContent(newValue,viewLocation, targetLoader, targetContent);

                    if (targetLoader == null){
                        targetLoader = setTabContentResult.loader;
                        targetContent = setTabContentResult.content;
                    }

                    break;
                case "VulnerabilityInjectionTab":

                    setTabContentResult = setTabContent(newValue,viewLocation, vulnerabilityLoader, vulnerabilityContent);

                    if (vulnerabilityLoader == null) {
                        vulnerabilityLoader = setTabContentResult.loader;
                        vulnerabilityContent = setTabContentResult.content;

                    }

                    break;
                case "ListenerTab":

                    setTabContentResult = setTabContent(newValue,viewLocation, listenerLoader, listenerContent);

                    if (listenerLoader == null){
                        listenerLoader = setTabContentResult.loader;
                        listenerContent = setTabContentResult.content;
                    }

                    break;
                case "ProxyTab":

                    setTabContentResult = setTabContent(newValue,viewLocation, proxyLoader, proxyContent);

                    if (proxyLoader == null){
                        proxyLoader = setTabContentResult.loader;
                        proxyContent = setTabContentResult.content;
                    }

                    break;
                case "PayloadTab":

                    setTabContentResult = setTabContent(newValue,viewLocation, payloadLoader, payloadContent);

                    if (payloadLoader == null) {
                        payloadLoader = setTabContentResult.loader;
                        payloadContent = setTabContentResult.content;
                    }

                    break;
                case "ManualAttackTab":

                    setTabContentResult = setTabContent(newValue,viewLocation, manualAttackLoader, manualAttackContent);

                    if (manualAttackLoader == null){
                        manualAttackLoader = setTabContentResult.loader;
                        manualAttackContent = setTabContentResult.content;
                    }

                    break;
                case "BrowserTab":

                    setTabContentResult = setTabContent(newValue,viewLocation, browserLoader, browserContent);

                    if (browserLoader == null){
                        browserLoader = setTabContentResult.loader;
                        browserContent = setTabContentResult.content;
                    }

                    break;
                case "IDSTab":

                    setTabContentResult = setTabContent(newValue,viewLocation, idsLoader, idsContent);

                    if (idsLoader == null){
                        idsLoader = setTabContentResult.loader;
                        idsContent = setTabContentResult.content;
                    }

                    break;
            }
        });
    }

    private ReturningLoaderAndParent setTabContent(Tab tab, String location, FXMLLoader loader, Parent parent) {

        if (loader == null) {
            loader = new FXMLLoader(getClass().getResource(location));
            try {
                parent = loader.load();
            } catch (IOException e) {
                e.getStackTrace();
            }
        }

        tab.setContent(parent);

        return new ReturningLoaderAndParent(loader, parent);

    }

    private void loadMainTab() {
        databaseLoader = new FXMLLoader(getClass().getResource("/views/DatabaseView.fxml"));
        try {
            databaseContent = databaseLoader.load();
        } catch (IOException e) {
            e.printStackTrace();
        }
        DatabaseTab.setContent(databaseContent);
    }

    private class ReturningLoaderAndParent {

        private FXMLLoader loader;
        private Parent content;

        private ReturningLoaderAndParent(FXMLLoader loader, Parent content) {
            this.loader = loader;
            this.content = content;
        }
    }
}
