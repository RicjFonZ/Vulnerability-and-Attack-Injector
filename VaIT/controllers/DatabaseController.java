package controllers;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import utilities.logs.TableLog;

import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.ResourceBundle;
import java.util.UUID;

public class DatabaseController implements Initializable {

    @FXML private TableView<TableLog> DatabaseLogTable;
    @FXML private TableColumn<TableLog, String> logTimeColumn;
    @FXML private TableColumn<TableLog, String> logDescriptionColumn;

    //@FXML private Button saveLogs;
    @FXML private Button clearLogs;

    private ObservableList<TableLog> logData = FXCollections.observableArrayList();

    @Override
    public void initialize(final URL location, final ResourceBundle resources) {
        //Comment to avoid Codacy warnings

        logTimeColumn.setCellValueFactory(cellData -> cellData.getValue().logTimeProperty());
        logDescriptionColumn.setCellValueFactory(cellData -> cellData.getValue().logDescriptionProperty());


//        logData.add(new TableLog("timeStamp", "randomUUIDString"));
//        logData.add(new TableLog("timeStamp", "randomUUIDString"));
//        logData.add(new TableLog("timeStamp", "randomUUIDString"));
//        logData.add(new TableLog("timeStamp", "randomUUIDString"));
//        logData.add(new TableLog("timeStamp", "randomUUIDString"));

        DatabaseLogTable.setItems(getLogsData());

        Thread t = new Thread(() -> {
            while(true) {
                try {
                    Thread.sleep(1000);

                    String timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss").format(new Date());

                    UUID uuid = UUID.randomUUID();
                    String randomUUIDString = uuid.toString();

                    logData.add(new TableLog(timeStamp, randomUUIDString));

                } catch (InterruptedException ie) {
                    System.out.print(ie.getMessage());
                }
            }
        });

        t.start();

        clearLogs.setOnAction(event -> logData.clear());
    }

    private ObservableList<TableLog> getLogsData() {
        return logData;
    }
}

