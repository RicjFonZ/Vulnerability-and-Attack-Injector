package controllers;

import javafx.collections.FXCollections;
import javafx.collections.ListChangeListener;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.control.CheckBox;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import datamodel.TableLog;
import utilities.EnumTypes;
import utilities.HandleFiles;

import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.ResourceBundle;
import java.util.UUID;

public class DatabaseController implements Initializable {

    @FXML private TableView<TableLog> DatabaseLogTable;
    @FXML private TableColumn<TableLog, String> logTimeColumn;
    @FXML private TableColumn<TableLog, String> logDescriptionColumn;

    @FXML private CheckBox csvCheckBox;
    @FXML private CheckBox xmlCheckBox;

    @FXML private Button exportLogs;
    @FXML private Button clearLogs;

    private ObservableList<TableLog> logData = FXCollections.observableArrayList();

    private final HandleFiles handleFiles = new HandleFiles();

    private Boolean isDisable = true;
    private Boolean isCsv = true;

    @Override
    public void initialize(final URL location, final ResourceBundle resources) {

        //Control behavior of CheckBoxes for exporting table logs files.
        controlExportCheckBox();

        //Control behavior of export and clear buttons related to table logs
        exportDataBaseLogs();

        //Clear all logs from DataBase logs table
        clearDataBaseLogs();



        logTimeColumn.setCellValueFactory(cellData -> cellData.getValue().logTimeProperty());
        logDescriptionColumn.setCellValueFactory(cellData -> cellData.getValue().logDescriptionProperty());


        /*logData.add(new TableLog("timeStamp", "randomUUIDString"));
        logData.add(new TableLog("timeStamp", "randomUUIDString"));
        logData.add(new TableLog("timeStamp", "randomUUIDString"));
        logData.add(new TableLog("timeStamp", "randomUUIDString"));
        logData.add(new TableLog("timeStamp", "randomUUIDString"));*/

        DatabaseLogTable.setItems(logData);

        final Thread t = new Thread(() -> {
            while(true) {
                try {
                    Thread.sleep(5000);

                    final String timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss").format(new Date());

                    final UUID uuid = UUID.randomUUID();
                    final String randomUUIDString = uuid.toString();

                    logData.add(new TableLog(timeStamp, randomUUIDString));

                } catch (InterruptedException ie) {
                    System.out.print(ie.getMessage());
                }
            }
        });

        t.start();

        //Listener for changes on logs Data
        listenerLogsData();


    }

    private void clearDataBaseLogs() {
        clearLogs.setOnAction(event -> logData.clear());
    }

    private void exportDataBaseLogs() {
        exportLogs.setOnAction(event -> handleFiles.saveLogsFile(logData, isCsv, EnumTypes.vaitMenusEnum.Database));
    }

    private void listenerLogsData() {
        logData.addListener((ListChangeListener<TableLog>) c -> {

            isDisable = logData.isEmpty();

            elementsVisibility();
        });
    }

    private void elementsVisibility() {
        csvCheckBox.setDisable(isDisable);
        xmlCheckBox.setDisable(isDisable);
        exportLogs.setDisable(isDisable);
        clearLogs.setDisable(isDisable);
    }

    private void controlExportCheckBox() {

        csvCheckBox.selectedProperty().addListener((observable, oldValue, newValue) -> {
                csvCheckBox.setSelected(newValue);
                xmlCheckBox.setSelected(oldValue);
                isCsv = newValue;

        });

        xmlCheckBox.selectedProperty().addListener((observable, oldValue, newValue) -> {
                xmlCheckBox.setSelected(newValue);
                csvCheckBox.setSelected(oldValue);
                isCsv = oldValue;
        });
    }

}

