package controllers;

import datamodel.TableLog;
import javafx.collections.FXCollections;
import javafx.collections.ListChangeListener;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.control.CheckBox;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import utilities.EnumTypes;
import utilities.HandleFiles;

import java.io.FileNotFoundException;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.UUID;

public class HTTPProxyController implements Initializable {

    @FXML private TableView<TableLog> httpProxyLogTable;
    @FXML private TableColumn<TableLog, String> logTimeColumn;
    @FXML private TableColumn<TableLog, String> logDescriptionColumn;

    @FXML private CheckBox unknownBox;
    @FXML private CheckBox xmlCheckBox;

    @FXML private Button exportLogs;
    @FXML private Button clearLogs;

    private ObservableList<TableLog> logData = FXCollections.observableArrayList();

    private final HandleFiles handleFiles = new HandleFiles();

    private Boolean isDisable = true;
    private Boolean isXml = true;
    @Override
    public void initialize(final URL location, final ResourceBundle resources) {

        //Control behavior of CheckBoxes for exporting table logs files.
        controlExportCheckBox();

        //Control behavior of export and clear buttons related to table logs
        exportHttpProxyLogs();

        //Clear all logs from HttpProxy logs table
        clearHttpProxyLogs();

        logTimeColumn.setCellValueFactory(cellData -> cellData.getValue().logTimeProperty());
        logDescriptionColumn.setCellValueFactory(cellData -> cellData.getValue().logDescriptionProperty());

        httpProxyLogTable.setItems(logData);

        //Thread to simulate creation of logs
        final Thread t = new Thread(() -> {
            while(true) {
                try {
                    Thread.sleep(5007);

                    final String timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss", Locale.forLanguageTag("PT")).format(new Date());

                    final UUID uuid = UUID.randomUUID();
                    final String randomUUIDString = uuid.toString();

                    logData.add(new TableLog(timeStamp, randomUUIDString));

                } catch (InterruptedException ie) {
                    System.out.print(ie.getMessage());
                }
            }
        });
        t.start();

        //Listener for changes on logs Data
        listenerLogsData();
    }

    private void clearHttpProxyLogs() {
        clearLogs.setOnAction(event -> logData.clear());
    }

    private void exportHttpProxyLogs() {
        exportLogs.setOnAction(event -> {
            try {
                handleFiles.saveLogsFile(logData, isXml, EnumTypes.vaitMenusEnum.HttpProxy);
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        });
    }

    private void listenerLogsData() {
        logData.addListener((ListChangeListener<TableLog>) c -> {

            isDisable = logData.isEmpty();
            elementsVisibility();
        });
    }

    private void elementsVisibility() {
        unknownBox.setDisable(isDisable);
        xmlCheckBox.setDisable(isDisable);
        exportLogs.setDisable(isDisable);
        clearLogs.setDisable(isDisable);
    }

    private void controlExportCheckBox() {

        unknownBox.selectedProperty().addListener((observable, oldValue, newValue) -> {
            unknownBox.setSelected(newValue);
            xmlCheckBox.setSelected(oldValue);
            isXml = newValue;
            exportLogs.setDisable(oldValue);
        });

        xmlCheckBox.selectedProperty().addListener((observable, oldValue, newValue) -> {
            xmlCheckBox.setSelected(newValue);
            unknownBox.setSelected(oldValue);
            isXml = oldValue;
        });
    }
}
