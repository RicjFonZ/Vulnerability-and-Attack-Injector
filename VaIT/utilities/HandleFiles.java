package utilities;

import datamodel.LogTable;
import javafx.collections.ObservableList;
import javafx.scene.control.TextArea;
import javafx.stage.FileChooser;

import java.io.*;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.logging.Logger;

public class HandleFiles {

    private String logFileToPrint;

    private Logger log = Logger.getLogger(HandleFiles.class.getName());

    public File openFileDialog(final String description, final String extensions, final String tittle){
        final FileChooser fileChooser = new FileChooser();
        final FileChooser.ExtensionFilter extFilter = new FileChooser.ExtensionFilter(description, extensions);
        fileChooser.setTitle(tittle);
        fileChooser.getExtensionFilters().add(extFilter);
        return fileChooser.showOpenDialog(null);
    }

    public void saveFile(final String description, final String extensions, final TextArea textArea, final String context, final String finalName){
        final FileChooser fileChooser = new FileChooser();
        final FileChooser.ExtensionFilter extFilter = new FileChooser.ExtensionFilter(description, extensions);
        fileChooser.getExtensionFilters().add(extFilter);
        fileChooser.setInitialFileName(getInitialFileName(context, finalName));
        final File file = fileChooser.showSaveDialog(null);
        if(file != null) {
            saveFile(textArea.getText(), file);
        }
    }

    private String getInitialFileName(final String methodName, final String EncodeDecode){
        final DateFormat sdf = new SimpleDateFormat("HH-mm-ss", Locale.forLanguageTag("PT"));
        final Date today = Calendar.getInstance().getTime();
        final String reportDate = sdf.format(today);
        final String methodNameTreated = methodName.replaceAll("\\s+","");
        return methodNameTreated + "_"+EncodeDecode+"_"+reportDate;
    }

    private String getLogsFileName(final String context){
        final DateFormat sdf = new SimpleDateFormat("HH-mm-ss", Locale.forLanguageTag("PT"));
        final Date today = Calendar.getInstance().getTime();
        final String reportDate = sdf.format(today);
        final String contextTreated = context.replaceAll("\\s+","");
        return contextTreated + "_" + reportDate;
    }

    private void saveFile(final String content, final File file){
        try {

            final BufferedWriter wr = Files.newBufferedWriter(Paths.get(file.toURI()), StandardCharsets.UTF_8);
            wr.write(content);
            wr.close();
            
        } catch (IOException ex) {
            log.fine(ex.getMessage());
        }
    }

    public void saveLogsFile(final ObservableList<LogTable> logsData, final Boolean isXml, final EnumTypes.vaitMenusEnum context) throws FileNotFoundException {

        String extension = "";
        String description = "";

        try {
            if (isXml){

                //generate xml file
                final GenerateXmlLogFile xmlGenerator = new GenerateXmlLogFile(logsData, context);
                logFileToPrint = xmlGenerator.getGeneratedXmlFile();
                extension = ".xml";
                description = "XML File";

            }else {
                log.fine("EXPORT MUST BE IMPLEMENTED IN FUTURE");
            }
        }catch (Exception ex){
            log.fine("saveLogsFile " + ex.getMessage());
        }

        final FileChooser fileChooser = new FileChooser();
        final FileChooser.ExtensionFilter extFilter = new FileChooser.ExtensionFilter(description, extension);
        fileChooser.getExtensionFilters().add(extFilter);
        fileChooser.setInitialFileName(getLogsFileName(context.toString()+"Log"));
        final File file = fileChooser.showSaveDialog(null);

        if(file != null) {

            if (isXml){
                final PrintWriter pw = new PrintWriter(new File(file.getPath()));
                pw.write(logFileToPrint);
                pw.close();
            }
            else {
                saveFile(logFileToPrint, file);
            }
        }
    }
}
