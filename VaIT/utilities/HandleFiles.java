package utilities;

import datamodel.TableLog;
import javafx.collections.ObservableList;
import javafx.scene.control.TextArea;
import javafx.stage.FileChooser;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

public class HandleFiles {

    private String logFileToPrint;

    public File openFileDialog(final String description, final String extensions, final String tittle){
        final FileChooser fileChooser = new FileChooser();
        final FileChooser.ExtensionFilter extFilter = new FileChooser.ExtensionFilter(description, extensions);
        fileChooser.setTitle(tittle);
        fileChooser.getExtensionFilters().add(extFilter);
        return fileChooser.showOpenDialog(null);
    }

    public void saveFile(final String description, final String extensions, final TextArea textArea, final String methodName, final String encodeDecode){
        final FileChooser fileChooser = new FileChooser();
        final FileChooser.ExtensionFilter extFilter = new FileChooser.ExtensionFilter(description, extensions);
        fileChooser.getExtensionFilters().add(extFilter);
        fileChooser.setInitialFileName(getInitialFileName(methodName, encodeDecode));
        final File file = fileChooser.showSaveDialog(null);
        if(file != null) {
            saveFile(textArea.getText(), file);
        }
    }

    private String getInitialFileName(final String methodName, final String EncodeDecode){
        final DateFormat sdf = new SimpleDateFormat("HH-mm-ss");
        final Date today = Calendar.getInstance().getTime();
        final String reportDate = sdf.format(today);
        final String methodNameTreated = methodName.replaceAll("\\s+","");
        return methodNameTreated + "_"+EncodeDecode+"_"+reportDate;
    }

    private String getLogsFileName(final String context){
        final DateFormat sdf = new SimpleDateFormat("HH-mm-ss");
        final Date today = Calendar.getInstance().getTime();
        final String reportDate = sdf.format(today);
        final String contextTreated = context.replaceAll("\\s+","");
        return contextTreated + "_" + reportDate;
    }

    private void saveFile(final String content, final File file){
        try {
            final FileWriter fileWriter;
            fileWriter = new FileWriter(file);
            fileWriter.write(content);
            fileWriter.close();
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
        }
    }

    public void saveLogsFile(final ObservableList<TableLog> logsData, final Boolean isCsv, final EnumTypes.vaitMenusEnum context){

        String extension = "";
        String description = "";

        try {
            if (isCsv){
                //generate csv file
                extension = ".csv";
                description = "CSV File";
            }else {
                //generate xml file
                final GenerateXmlLogFile xmlGenerator = new GenerateXmlLogFile(logsData, context);
                logFileToPrint = xmlGenerator.getGeneratedXmlFile();
                extension = ".xml";
                description = "XML File";
            }

        }catch (Exception ex){
            System.out.print("saveLogsFile " + ex.getMessage());
        }

        final FileChooser fileChooser = new FileChooser();
        final FileChooser.ExtensionFilter extFilter = new FileChooser.ExtensionFilter(description, extension);
        fileChooser.getExtensionFilters().add(extFilter);
        fileChooser.setInitialFileName(getLogsFileName(context.toString()+"Log"));
        final File file = fileChooser.showSaveDialog(null);

        if(file != null) {
            saveFile(logFileToPrint, file);
        }
    }
}
