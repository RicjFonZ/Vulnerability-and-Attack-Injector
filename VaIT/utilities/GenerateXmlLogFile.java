package utilities;

import datamodel.TableLog;
import javafx.collections.ObservableList;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.StringWriter;

class GenerateXmlLogFile {

    private String generatedXmlFile;

    GenerateXmlLogFile(final ObservableList<TableLog> logsData, final EnumTypes.vaitMenusEnum context) {

        final String xmlRootElement = context.toString();

        try{

            final DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            final DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            final Document doc = dBuilder.newDocument();
            //doc.setXmlStandalone(true);

            //add elements to Document
            final Element rootElement = doc.createElement(xmlRootElement);

            //append root element to document
            doc.appendChild(rootElement);

            logsData.forEach(log -> rootElement.appendChild(getLog(doc, log.logTimeProperty().getValue(), log.logDescriptionProperty().getValue())));

            //for output to file, console
            final TransformerFactory transformerFactory = TransformerFactory.newInstance();
            final Transformer transformer = transformerFactory.newTransformer();

            //for pretty print
            transformer.setOutputProperty(OutputKeys.INDENT, "yes");
            final StringWriter sw = new StringWriter();
            transformer.transform(new DOMSource(doc), new StreamResult(sw));

            generatedXmlFile = sw.toString();

            //write data on console, -JUST FOR TEST-
            //StreamResult console = new StreamResult(System.out);
            //transformer.transform(source, console);

        } catch(Exception e){
            e.printStackTrace();
        }
    }

    private Node getLog(final Document doc, String logTime, final String logDescription) {

        final Element log = doc.createElement("LogInfo");

        //create time element
        log.appendChild(getLogElements(doc,"LogTime", logTime));

        //create description element
        log.appendChild(getLogElements(doc,"LogDescription", logDescription));

        return log;
    }

    //utility method to create text node
    private Node getLogElements(final Document doc, final String childDescription, String logInfo) {
        final Element node = doc.createElement(childDescription);
        node.appendChild(doc.createTextNode(logInfo));
        return node;
    }

    public String getGeneratedXmlFile(){
        return generatedXmlFile;
    }
}

