package utilities;

import datamodel.RegexTable;
import javafx.collections.ObservableList;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.StringWriter;

class GenerateXmlRegexResults {

    private String generatedXmlRegexFile;

    public GenerateXmlRegexResults(final ObservableList<RegexTable> regexData) {

        try{

            final DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            final DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            final Document doc = dBuilder.newDocument();

            //add elements to Document
            final String xmlRootElement = "RegexToolResults";
            final Element rootElement = doc.createElement(xmlRootElement);

            //append root element to document
            doc.appendChild(rootElement);

            regexData.forEach(result -> rootElement.appendChild(
                    getResult(doc,
                            result.getStartProperty().getValue(),
                            result.getEndProperty().getValue(),
                            result.getLineProperty().getValue(),
                            result.getColumnProperty().getValue(),
                            result.getResultProperty().getValue()
                    )));

            //for output to file, console
            final TransformerFactory transformerFactory = TransformerFactory.newInstance();
            final Transformer transformer = transformerFactory.newTransformer();

            //for pretty print
            transformer.setOutputProperty(OutputKeys.INDENT, "yes");
            final StringWriter sw = new StringWriter();
            transformer.transform(new DOMSource(doc), new StreamResult(sw));

            generatedXmlRegexFile = sw.toString();

            //write data on console, -JUST FOR TEST-
            //StreamResult console = new StreamResult(System.out);
            //transformer.transform(source, console);

        } catch(Exception e){
            e.printStackTrace();
        }
    }

    private Node getResult(final Document doc, final String start, final String end, final String line, final String column, final String result) {

        final Element regexResult = doc.createElement("RegexResult");

        //Create start element
        regexResult.appendChild(getResultElements(doc,"Start", start));

        //Create start element
        regexResult.appendChild(getResultElements(doc,"End", end));

        //Create start element
        regexResult.appendChild(getResultElements(doc,"Line", line));

        //Create start element
        regexResult.appendChild(getResultElements(doc,"Column", column));

        //Create start element
        regexResult.appendChild(getResultElements(doc,"Result", result));

        return regexResult;
    }

    private Node getResultElements(final Document doc, final String childDescription, final String childContent) {
        final Element node = doc.createElement(childDescription);
        node.appendChild(doc.createTextNode(childContent));
        return node;
    }

    public String getGeneratedXmlFile(){
        return generatedXmlRegexFile;
    }
}
