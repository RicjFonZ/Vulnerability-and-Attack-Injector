package tools.controllers;

import utilities.HandleFiles;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.control.ListView;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;
import java.io.File;
import java.net.URL;
import java.util.ArrayList;
import java.util.ResourceBundle;

public class HackersToolController implements Initializable {

    @FXML
    private Button OpenXMLButton;
    @FXML
    private Button ProcessXMLButton;

    @FXML
    private TextField FileLocationTextField;
    @FXML
    private TextField NameTextField;
    @FXML
    private TextField LabelTextField;
    @FXML
    private TextField BrowsersTextField;

    @FXML
    public ListView<String> VulnerabilityTextArea = new ListView<>();
    @FXML
    private TextArea CodeTextArea;
    @FXML
    private TextArea DescriptionTextArea;

    private final HandleFiles handleFiles = new HandleFiles();
    private File openXMLFile;

    private ArrayList<String> XSSAttackNameArray = new ArrayList<>();
    private ArrayList<String> XSSAttackCodeArray = new ArrayList<>();
    private ArrayList<String> XSSAttackDescArray = new ArrayList<>();
    private ArrayList<String> XSSAttackLabelArray = new ArrayList<>();
    private ArrayList<String> XSSAttackBrowserArray = new ArrayList<>();

    @Override
    public void initialize(final URL location, final ResourceBundle resources) {

        //Open XML File
        OpenXMLButton.setOnAction(OpenXMLFileButtonEvent -> {
            openXMLFile = handleFiles.openFileDialog("XML files (*.xml)", "*.xml", "Open XML File");
            if (openXMLFile != null) {

                //Set Localization of Open File
                FileLocationTextField.setText(openXMLFile.getAbsolutePath());

                //Activate Visual Elements
                ProcessXMLButton.setDisable(false);
            }
        });

        //Process XML File
        ProcessXMLButton.setOnAction(ProcessXMLFileButtonEvent -> processVulnerabilityXML());

        //Listener for Selected Attacks
        VulnerabilityTextArea.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -> xssAttackNamesValueChanged(VulnerabilityTextArea.getSelectionModel().getSelectedIndex()));
    }

    private void xssAttackNamesValueChanged(final int selectedIndex) {
        NameTextField.setText(XSSAttackNameArray.get(selectedIndex));
        CodeTextArea.setText(XSSAttackCodeArray.get(selectedIndex));
        DescriptionTextArea.setText(XSSAttackDescArray.get(selectedIndex));
        LabelTextField.setText(XSSAttackLabelArray.get(selectedIndex));
        BrowsersTextField.setText(XSSAttackBrowserArray.get(selectedIndex));
    }

    private void processVulnerabilityXML() {

        XSSAttackNameArray.clear();
        XSSAttackCodeArray.clear();
        XSSAttackDescArray.clear();
        XSSAttackLabelArray.clear();
        XSSAttackBrowserArray.clear();

        try {
            final DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
            final DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
            final Document doc = docBuilder.parse(openXMLFile);

            // normalize text representation
            doc.getDocumentElement().normalize();

            final NodeList listOfAttacks = doc.getElementsByTagName("attack");

            for (int s = 0; s < listOfAttacks.getLength(); s++) {

                final Node firstAttackNode = listOfAttacks.item(s);

                if (firstAttackNode.getNodeType() == Node.ELEMENT_NODE) {

                    //Node Name
                    final Element firstAttackElement = (Element) firstAttackNode;
                    final NodeList nameList = firstAttackElement.getElementsByTagName("name");
                    final Element nameElement = (Element) nameList.item(0);
                    final NodeList textFNList = nameElement.getChildNodes();
                    XSSAttackNameArray.add(textFNList.item(0).getNodeValue().trim());
                    VulnerabilityTextArea.getItems().add(textFNList.item(0).getNodeValue().trim());

                    //Node Code
                    final NodeList codeList = firstAttackElement.getElementsByTagName("code");
                    final Element codeElement = (Element) codeList.item(0);
                    final NodeList textCodeList = codeElement.getChildNodes();
                    XSSAttackCodeArray.add(textCodeList.item(0).getNodeValue().trim());

                    //Node Desc
                    final NodeList descList = firstAttackElement.getElementsByTagName("desc");
                    final Element descElement = (Element) descList.item(0);
                    final NodeList textDescList = descElement.getChildNodes();
                    XSSAttackDescArray.add(textDescList.item(0).getNodeValue().trim());

                    //Node Label
                    final NodeList labelList = firstAttackElement.getElementsByTagName("label");
                    final Element labelElement = (Element) labelList.item(0);
                    final NodeList textLabelList = labelElement.getChildNodes();
                    XSSAttackLabelArray.add(textLabelList.item(0).getNodeValue().trim());

                    //Node Browser
                    final NodeList browserList = firstAttackElement.getElementsByTagName("browser");
                    final Element browserElement = (Element) browserList.item(0);
                    final NodeList textBrowserList = browserElement.getChildNodes();
                    XSSAttackBrowserArray.add(textBrowserList.item(0).getNodeValue().trim());
                }
            }
        } catch (Exception ignored) {}

        //Filling Arrays
        NameTextField.setText(XSSAttackNameArray.get(0));
        CodeTextArea.setText(XSSAttackCodeArray.get(0));
        DescriptionTextArea.setText(XSSAttackDescArray.get(0));
        LabelTextField.setText(XSSAttackLabelArray.get(0));
        BrowsersTextField.setText(XSSAttackBrowserArray.get(0));
    }
}