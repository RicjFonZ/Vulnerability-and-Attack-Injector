package tools.controllers;

import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.control.ListView;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.input.Clipboard;
import javafx.scene.input.ClipboardContent;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import utilities.HandleFiles;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.File;
import java.net.URL;
import java.util.ArrayList;
import java.util.ResourceBundle;

public class HackersToolController implements Initializable {

    private final HandleFiles handleFiles = new HandleFiles();
    private final Clipboard clipboard = Clipboard.getSystemClipboard();
    private final ClipboardContent content = new ClipboardContent();

    @FXML
    public ListView<String> vulnerabilityTextArea = new ListView<>();
    @FXML
    private Button openXMLButton;
    @FXML
    private Button processXMLButton;
    @FXML
    private Button copyCodeBT;
    @FXML
    private TextField fileLocationTextField;
    @FXML
    private TextField nameTextField;
    @FXML
    private TextField labelTextField;
    @FXML
    private TextField browsersTextField;
    @FXML
    private TextArea codeTextArea;
    @FXML
    private TextArea descriptionTextArea;

    private File openXMLFile;
    private ArrayList<String> xSSAttackNameArray = new ArrayList<>();
    private ArrayList<String> xSSAttackCodeArray = new ArrayList<>();
    private ArrayList<String> xSSAttackDescArray = new ArrayList<>();
    private ArrayList<String> xSSAttackLabelArray = new ArrayList<>();
    private ArrayList<String> xSSAttackBrowserArray = new ArrayList<>();

    @Override
    public void initialize(final URL location, final ResourceBundle resources) {

        //Open XML File
        openXMLFile();

        //Process XML File
        processXMLFile();

        //Listener for Selected Attacks
        listenerSelectedAttack();

        //Listener for Code Text Area
        listenerSelectedCodeTextArea();

        // Copy to clipboard Code Attack
        copyToClipboardAttackCode();
    }

    private void copyToClipboardAttackCode() {
        copyCodeBT.setOnAction(event -> {
            content.putString(codeTextArea.getText());
            clipboard.setContent(content);
        });
    }

    private void listenerSelectedCodeTextArea() {
        codeTextArea.textProperty().addListener((observable, oldValue, newValue) -> {
            if (newValue.length() == 0) {
                copyCodeBT.setDisable(true);
            } else {
                copyCodeBT.setDisable(false);
            }
        });
    }

    private void listenerSelectedAttack() {
        vulnerabilityTextArea.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -> xssAttackNamesValueChanged(vulnerabilityTextArea.getSelectionModel().getSelectedIndex()));
    }

    private void processXMLFile() {
        processXMLButton.setOnAction(ProcessXMLFileButtonEvent -> processVulnerabilityXML());
    }

    private void openXMLFile() {
        openXMLButton.setOnAction(OpenXMLFileButtonEvent -> {
            openXMLFile = handleFiles.openFileDialog("XML files (*.xml)", "*.xml", "Open XML File");
            if (openXMLFile != null) {

                //Set Localization of Open File
                fileLocationTextField.setText(openXMLFile.getAbsolutePath());

                //Activate Visual Elements
                processXMLButton.setDisable(false);
            }
        });
    }

    private void xssAttackNamesValueChanged(final int selectedIndex) {
        nameTextField.setText(xSSAttackNameArray.get(selectedIndex));
        codeTextArea.setText(xSSAttackCodeArray.get(selectedIndex));
        descriptionTextArea.setText(xSSAttackDescArray.get(selectedIndex));
        labelTextField.setText(xSSAttackLabelArray.get(selectedIndex));
        browsersTextField.setText(xSSAttackBrowserArray.get(selectedIndex));
    }

    private void processVulnerabilityXML() {

        xSSAttackNameArray.clear();
        xSSAttackCodeArray.clear();
        xSSAttackDescArray.clear();
        xSSAttackLabelArray.clear();
        xSSAttackBrowserArray.clear();

        try {
            final DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
            final DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
            final Document doc = docBuilder.parse(openXMLFile);

            // normalize text representation
            doc.getDocumentElement().normalize();

            final NodeList listOfAttacks = doc.getElementsByTagName("attack");

            for (int s = 0; s < listOfAttacks.getLength(); s++) {

                final Node firstAttackNode = listOfAttacks.item(s);

                if (firstAttackNode.getNodeType() == Node.ELEMENT_NODE) {

                    //Node Name
                    final Element firstAttackElement = (Element) firstAttackNode;
                    final NodeList nameList = firstAttackElement.getElementsByTagName("name");
                    final Element nameElement = (Element) nameList.item(0);
                    final NodeList textFNList = nameElement.getChildNodes();
                    xSSAttackNameArray.add(textFNList.item(0).getNodeValue().trim());
                    vulnerabilityTextArea.getItems().add(textFNList.item(0).getNodeValue().trim());

                    //Node Code
                    final NodeList codeList = firstAttackElement.getElementsByTagName("code");
                    final Element codeElement = (Element) codeList.item(0);
                    final NodeList textCodeList = codeElement.getChildNodes();
                    xSSAttackCodeArray.add(textCodeList.item(0).getNodeValue().trim());

                    //Node Desc
                    final NodeList descList = firstAttackElement.getElementsByTagName("desc");
                    final Element descElement = (Element) descList.item(0);
                    final NodeList textDescList = descElement.getChildNodes();
                    xSSAttackDescArray.add(textDescList.item(0).getNodeValue().trim());

                    //Node Label
                    final NodeList labelList = firstAttackElement.getElementsByTagName("label");
                    final Element labelElement = (Element) labelList.item(0);
                    final NodeList textLabelList = labelElement.getChildNodes();
                    xSSAttackLabelArray.add(textLabelList.item(0).getNodeValue().trim());

                    //Node Browser
                    final NodeList browserList = firstAttackElement.getElementsByTagName("browser");
                    final Element browserElement = (Element) browserList.item(0);
                    final NodeList textBrowserList = browserElement.getChildNodes();
                    xSSAttackBrowserArray.add(textBrowserList.item(0).getNodeValue().trim());
                }
            }
        } catch (Exception ignored) {
        }

        //Filling Arrays
        nameTextField.setText(xSSAttackNameArray.get(0));
        codeTextArea.setText(xSSAttackCodeArray.get(0));
        descriptionTextArea.setText(xSSAttackDescArray.get(0));
        labelTextField.setText(xSSAttackLabelArray.get(0));
        browsersTextField.setText(xSSAttackBrowserArray.get(0));
    }
}